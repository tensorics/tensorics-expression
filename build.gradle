apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

repositories {
    if (System.getenv('BUILD_SERVER') || System.getProperty('CERN_TECHNET_VM')) {
        maven {
            url 'http://artifactory.cern.ch/repo'
            url 'http://artifactory.cern.ch/jcenter'
        }
    } else {
        mavenCentral()
        jcenter()
    }
}

buildscript {
    repositories {
        if (System.getenv('BUILD_SERVER') || System.getProperty('CERN_TECHNET_VM')) {
            maven {
                url 'http://artifactory.cern.ch/repo'
                url 'http://artifactory.cern.ch/jcenter'
            }
        } else {
            mavenCentral()
            jcenter()
        }
    }
    dependencies { 
        classpath 'net.saliman:gradle-cobertura-plugin:2.4.0'
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3" 
        }
}

sourceSets {
    main { java {  srcDir 'src/java'
        } }
    test {
        java {
            srcDir 'src/examples'
            srcDir 'src/test'
        }
    }
}

if(System.getenv('TRAVIS')){
    apply plugin: 'cobertura'
    apply plugin: 'io.codearte.nexus-staging'
    apply from: './scripts/deploy.gradle'
}

dependencies {
    compile 'com.google.guava:guava:19.0'
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile 'org.tensorics:tensorics-core:0.0.28'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.assertj:assertj-core:3.6.1'
}

javadoc {  options.encoding = "UTF-8" }

task wrapper(type: Wrapper) { gradleVersion = '3.2.1' }

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts { archives javadocJar, sourcesJar }
